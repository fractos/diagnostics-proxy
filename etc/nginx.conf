worker_processes auto;
pid /run/nginx.pid;

events {
    worker_connections 768;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    default_type application/octet-stream;
    gzip on;
    gzip_disable "msie6";

    log_format bodylog '${DOLLAR}remote_addr - ${DOLLAR}remote_user [${DOLLAR}time_local] '
        '"${DOLLAR}request" ${DOLLAR}status ${DOLLAR}body_bytes_sent '
        '"${DOLLAR}http_referer" "${DOLLAR}http_user_agent" ${DOLLAR}request_time '
        '\n\n"${DOLLAR}req_headers" \n"${DOLLAR}req_body" \n>"${DOLLAR}resp_body"';


    server {
        listen $LISTEN_PORT default_server;
        access_log  /var/log/nginx/server.log bodylog;
     
        location / {
            proxy_pass  http://$PROXY_TARGET_HOST:$PROXY_TARGET_PORT;
            proxy_buffering off;
        }

        set ${DOLLAR}resp_body "";
        set ${DOLLAR}req_body "";
        set ${DOLLAR}req_headers "";

        client_body_buffer_size 16k;
        client_max_body_size 16k;

        lua_need_request_body on;

        rewrite_by_lua_block {
            local req_headers = "Headers: ";
            ngx.var.req_body = ngx.req.get_body_data();
            local h, err = ngx.req.get_headers();
            for k, v in pairs(h) do
                req_headers = req_headers .. k .. ": " .. v .. "\n";
            end

            ngx.var.req_headers = req_headers;
        }

        body_filter_by_lua '
        local resp_body = string.sub(ngx.arg[1], 1, 1000)
        ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
        if ngx.arg[2] then
          ngx.var.resp_body = ngx.ctx.buffered
        end
        ';
     }
}
